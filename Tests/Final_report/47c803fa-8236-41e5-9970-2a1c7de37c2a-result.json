{"name": "test_contact_us_negative[123ab@gmail.com--i cant find relevant message]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Thanks for the message!!\nMessage: unexpected alert open: {Alert text : Thanks for the message!!}\n  (Session info: chrome=109.0.5414.120)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x01006643]\n\t(No symbol) [0x00F9BE21]\n\t(No symbol) [0x00E9DA9D]\n\t(No symbol) [0x00F073A5]\n\t(No symbol) [0x00EEFB76]\n\t(No symbol) [0x00EC49C1]\n\t(No symbol) [0x00EC5E5D]\n\tGetHandleVerifier [0x0127A142+2497106]\n\tGetHandleVerifier [0x012A85D3+2686691]\n\tGetHandleVerifier [0x012ABB9C+2700460]\n\tGetHandleVerifier [0x010B3B10+635936]\n\t(No symbol) [0x00FA4A1F]\n\t(No symbol) [0x00FAA418]\n\t(No symbol) [0x00FAA505]\n\t(No symbol) [0x00FB508B]\n\tBaseThreadInitThunk [0x763F7D69+25]\n\tRtlInitializeExceptionChain [0x77AEBB9B+107]\n\tRtlClearBits [0x77AEBB1F+191]", "trace": "self = <Tests.tests.TestAllPages object at 0x0000018866DDBC70>, Email = '123ab@gmail.com', Contact_name = '', message = 'i cant find relevant message'\n\n    @allure.description('Test contact us with different inputs ')\n    @allure.step\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"Email, Contact_name, message\",\n                             [\n                                 (\"\", \"one\", \"there is bug in contact page please fix it\"),\n                                 (\"123ab@gmail.com\", \"\", \"i cant find relevant message\"),\n                                 (\"ab123@gmail.com\", \"love\", \"\"),\n                                 (\"\", \"\", \"how can i take the path for assertion for invalid login?\"),\n                                 (\"abcd@gmail.com\", \"\", \"\"),\n                                 (\"\", \"onelove\", \"\"),\n                                 (\"\", \"\", \"\")])\n    def test_contact_us_negative(self, Email, Contact_name, message):\n>       self.setup_demoblaze()\n\ntests.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Base_Page\\base_pages.py:17: in setup_demoblaze\n    self.driver.get(self.HOME_PAGE)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in get\n    self.execute(Command.GET, {'url': url})\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018866C12E60>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Thanks for the message!!\"},\"error\":\"unexpected alert open\",\"messag...dInitThunk [0x763F7D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77AEBB9B+107]\\\\n\\\\tRtlClearBits [0x77AEBB1F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Thanks for the message!!\nE           Message: unexpected alert open: {Alert text : Thanks for the message!!}\nE             (Session info: chrome=109.0.5414.120)\nE           Stacktrace:\nE           Backtrace:\nE           \t(No symbol) [0x01006643]\nE           \t(No symbol) [0x00F9BE21]\nE           \t(No symbol) [0x00E9DA9D]\nE           \t(No symbol) [0x00F073A5]\nE           \t(No symbol) [0x00EEFB76]\nE           \t(No symbol) [0x00EC49C1]\nE           \t(No symbol) [0x00EC5E5D]\nE           \tGetHandleVerifier [0x0127A142+2497106]\nE           \tGetHandleVerifier [0x012A85D3+2686691]\nE           \tGetHandleVerifier [0x012ABB9C+2700460]\nE           \tGetHandleVerifier [0x010B3B10+635936]\nE           \t(No symbol) [0x00FA4A1F]\nE           \t(No symbol) [0x00FAA418]\nE           \t(No symbol) [0x00FAA505]\nE           \t(No symbol) [0x00FB508B]\nE           \tBaseThreadInitThunk [0x763F7D69+25]\nE           \tRtlInitializeExceptionChain [0x77AEBB9B+107]\nE           \tRtlClearBits [0x77AEBB1F+191]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: UnexpectedAlertPresentException"}, "description": "Test contact us with different inputs ", "steps": [{"name": "test_contact_us_negative", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Thanks for the message!!\nMessage: unexpected alert open: {Alert text : Thanks for the message!!}\n  (Session info: chrome=109.0.5414.120)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x01006643]\n\t(No symbol) [0x00F9BE21]\n\t(No symbol) [0x00E9DA9D]\n\t(No symbol) [0x00F073A5]\n\t(No symbol) [0x00EEFB76]\n\t(No symbol) [0x00EC49C1]\n\t(No symbol) [0x00EC5E5D]\n\tGetHandleVerifier [0x0127A142+2497106]\n\tGetHandleVerifier [0x012A85D3+2686691]\n\tGetHandleVerifier [0x012ABB9C+2700460]\n\tGetHandleVerifier [0x010B3B10+635936]\n\t(No symbol) [0x00FA4A1F]\n\t(No symbol) [0x00FAA418]\n\t(No symbol) [0x00FAA505]\n\t(No symbol) [0x00FB508B]\n\tBaseThreadInitThunk [0x763F7D69+25]\n\tRtlInitializeExceptionChain [0x77AEBB9B+107]\n\tRtlClearBits [0x77AEBB1F+191]\n\n", "trace": "  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\PycharmProjects\\pythonProject1\\FinalProject\\Tests\\tests.py\", line 133, in test_contact_us_negative\n    self.setup_demoblaze()\n  File \"C:\\Users\\user\\PycharmProjects\\pythonProject1\\FinalProject\\Base_Page\\base_pages.py\", line 17, in setup_demoblaze\n    self.driver.get(self.HOME_PAGE)\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in get\n    self.execute(Command.GET, {'url': url})\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 428, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n"}, "parameters": [{"name": "Email", "value": "'123ab@gmail.com'"}, {"name": "Contact_name", "value": "''"}, {"name": "message", "value": "'i cant find relevant message'"}], "start": 1675539722981, "stop": 1675539722989}], "parameters": [{"name": "Email", "value": "'123ab@gmail.com'"}, {"name": "Contact_name", "value": "''"}, {"name": "message", "value": "'i cant find relevant message'"}], "start": 1675539722981, "stop": 1675539722995, "uuid": "e4734e0e-c7a0-44b2-b061-aa38bbc80df9", "historyId": "2712332553dd4f86363babd5ed689f4c", "testCaseId": "06b713d1ff8c5633d53c69737b537625", "fullName": "tests.TestAllPages#test_contact_us_negative", "labels": [{"name": "severity", "value": "critical"}, {"name": "suite", "value": "tests"}, {"name": "subSuite", "value": "TestAllPages"}, {"name": "host", "value": "gman-2121"}, {"name": "thread", "value": "31860-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests"}]}